package com.firesoon.idaservice.chargeBillCollect.impl;

import com.firesoon.idaservice.chargeBillCollect.ChargeBillCollectService;
import com.firesoon.paymentmapper.chargeBillCollect.ChargeBillCollectMapper;
import com.google.common.collect.ImmutableMap;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

import org.jeecgframework.poi.excel.entity.params.ExcelExportEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Primary;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

@Primary
@Service
public class ChargeBillServiceCollectImpl implements ChargeBillCollectService {

	@Autowired
	private ChargeBillCollectMapper chargeBillCollectMapper;

	@Autowired
	private JdbcTemplate jdbcTemplate;

	@Override
	public Map<String, Object> query(Map<String, Object> map) {
		String sql = "select table_name from user_tables where table_name like 'IDA_CHARGEBILL_DETAIL_%' and table_name not like '%TEST' ";
		List<Map<String, Object>> tableList = jdbcTemplate.queryForList(sql);
		StringBuffer unionSql = new StringBuffer("with ida_chargebill_detail as(");
		for (int i = 0; i < tableList.size(); i++) {
			String tablename = tableList.get(i).get("TABLE_NAME").toString();
			if (i < tableList.size() - 1) {
				unionSql.append(
						" select month,charge_money,isappeal,item_name,doctor_name,charge_reason,deductedept from "
								+ tablename + " union all ");
			} else {
				unionSql.append(
						" select month,charge_money,isappeal,item_name,doctor_name,charge_reason,deductedept from "
								+ tablename + ") ");
			}
		}
		map.put("unionSql", unionSql);
		List<String> dateList = new ArrayList<>();
		try {
			dateList = getDateList(map);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		Map<String, Object> result = new HashMap<>();
		Map<String, Object> resultMap = new HashMap<>();
		List<Map<String, Object>> moneyList = chargeBillCollectMapper.getAllMoney(map);
		if (moneyList.get(0) != null && moneyList.get(0).get("ALLCHARGE") != null) {
			result.put("allcharge", chargeBillCollectMapper.getAllMoney(map).get(0).getOrDefault("ALLCHARGE", "0"));
		} else {
			result.put("allcharge", "0");
		}
		if (moneyList.get(1) != null && moneyList.get(1).get("ALLBACK") != null) {
			result.put("allback", chargeBillCollectMapper.getAllMoney(map).get(1).getOrDefault("ALLBACK", "0"));
		} else {
			result.put("allback", "0");
		}
		if ("3".equals(map.get("dateType"))) {
			String date = chargeBillCollectMapper.getMonthMax(map).get(0).get("TIME").toString();
			String[] dateArr = date.split("-");
			result.put("mostmonth", dateArr[0] + "年Q" + dateArr[1]);
		} else {
			result.put("mostmonth", chargeBillCollectMapper.getMonthMax(map).get(0).get("TIME"));
		}
		if ("3".equals(map.get("dateType")) && chargeBillCollectMapper.getYearMax(map).size() > 0) {
			String date = chargeBillCollectMapper.getYearMax(map).get(0).get("TIME").toString();
			String[] dateArr = date.split("-");
			result.put("bviousmonth", dateArr[0] + "年Q" + dateArr[1]);
		} else if (!"3".equals(map.get("dateType")) && chargeBillCollectMapper.getYearMax(map).size() > 0) {
			result.put("bviousmonth", chargeBillCollectMapper.getYearMax(map).get(0).get("TIME"));
		} else {
			result.put("bviousmonth", "");
		}
		Double money = 0d;
		if (chargeBillCollectMapper.getDepartmentMoney(map).size() == 0) {
			result.put("mostdepart", "-");
		} else {
			result.put("mostdepart", chargeBillCollectMapper.getDepartmentMoney(map).get(0).get("DEPARTMENT"));
			money = Double.valueOf(
					chargeBillCollectMapper.getDepartmentMoney(map).get(0).getOrDefault("MONEY", "0").toString());
		}
		Double allMoney = Double.valueOf(result.get("allcharge").toString());
		Double rate = 0d;
		if (allMoney > 0) {
			rate = money * 100 / allMoney;
			BigDecimal bg = new BigDecimal(rate);
			Double math = bg.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
			if (math > 0)
				result.put("rate", math.toString() + "%");
			else
				result.put("rate", "0");
		}
		resultMap.put("info", result);
		List<Map<String, Object>> resultMapList = chargeBillCollectMapper.getData(map);
		List<String> departList = new ArrayList<>();
		resultMapList.forEach(x -> {
			x.forEach((k, v) -> {
				if ("DEPARTMENT".equals(k))
					departList.add(v.toString());
				if (v == null)
					x.put(k, "0");
			});
		});
		List<Map<String, Object>> finalList = new ArrayList<>();
		for (String depart : departList) {
			Map<String, Object> dataMap = new HashMap<>();
			Map<String, String> yearMonth = new HashMap<>();
			List<String> yearCompare = new ArrayList<>();
			List<String> monthCompare = new ArrayList<>();
			for (int i = 0; i < dateList.size(); i++) {
				dataMap.put(dateList.get(i), "0");
			}
			dataMap.put("yearCompare", yearCompare);
			dataMap.put("monthCompare", monthCompare);
			Double num = 0d;
			dataMap.put("科室", depart);
			for (Map<String, Object> x : resultMapList) {
				if (depart.equals(x.get("DEPARTMENT").toString()) && !"3".equals(map.get("dateType"))) {
					dataMap.put(x.get("TIME").toString(), x.get("MONEY"));
					Double nowMoney = Double.valueOf(x.get("MONEY").toString());
					Double yearMoney = Double.valueOf(x.get("YEARMONEY").toString());
					Double monthMoney = Double.valueOf(x.get("MONTHMONEY").toString());
					Double yearRate = 0d;
					Double monthRate = 0d;
					if (yearMoney > 0) {
						yearRate = nowMoney * 100 / yearMoney;
						BigDecimal bg = new BigDecimal(rate);
						yearRate = bg.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
					}
					if (monthMoney > 0) {
						monthRate = nowMoney * 100 / monthMoney;
						BigDecimal bg = new BigDecimal(rate);
						monthRate = bg.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
					}
					String yearResult = "";
					String monthResult = "";
					if (yearRate == 0d) {
						yearResult = "0";
					} else {
						yearResult = yearRate.toString() + "%";
					}
					if (monthRate == 0d) {
						monthResult = "0";
					} else {
						monthResult = monthRate.toString() + "%";
					}
					yearMonth.put(x.get("TIME").toString(), yearResult + "#" + monthResult);
					num += Double.valueOf(x.get("MONEY").toString());
				} else if (depart.equals(x.get("DEPARTMENT").toString()) && "3".equals(map.get("dateType"))) {
					String[] dateTime = x.get("TIME").toString().split("-");
					dataMap.put(dateTime[0] + "年Q" + dateTime[1], x.get("MONEY"));
					Double nowMoney = Double.valueOf(x.get("MONEY").toString());
					Double yearMoney = Double.valueOf(x.get("YEARMONEY").toString());
					Double monthMoney = Double.valueOf(x.get("MONTHMONEY").toString());
					Double yearRate = 0d;
					Double monthRate = 0d;
					if (yearMoney > 0) {
						yearRate = nowMoney * 100 / yearMoney;
						BigDecimal bg = new BigDecimal(rate);
						yearRate = bg.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
					}
					if (monthMoney > 0) {
						monthRate = nowMoney * 100 / monthMoney;
						BigDecimal bg = new BigDecimal(rate);
						monthRate = bg.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
					}
					String yearResult = "";
					String monthResult = "";
					if (yearRate == 0d) {
						yearResult = "0";
					} else {
						yearResult = yearRate.toString() + "%";
					}
					if (monthRate == 0d) {
						monthResult = "0";
					} else {
						monthResult = monthRate.toString() + "%";
					}
					yearMonth.put(dateTime[0] + "年Q" + dateTime[1], yearResult + "#" + monthResult);
					num += Double.valueOf(x.get("MONEY").toString());
				}
				for (int i = 1; i < dateList.size() - 1; i++) {
					if (yearMonth.get(dateList.get(i)) != null) {
						// String dfg = yearMonth.get(dateList.get(i));
						yearCompare.add(yearMonth.get(dateList.get(i)).split("#")[0]);
						monthCompare.add(yearMonth.get(dateList.get(i)).split("#")[1]);
					} else {
						yearCompare.add("0");
						monthCompare.add("0");
					}
				}
			}
			dataMap.put("汇总", num);
			finalList.add(dataMap);
		}
		Map<String, Double> allDepart = new HashMap<>();
		allDepart.put("汇总", 0d);
		for (int i = 0; i < dateList.size(); i++) {
			allDepart.put(dateList.get(i), 0d);
		}
		for (Map<String, Object> m : finalList) {
			for (Map.Entry<String, Double> entry : allDepart.entrySet()) {
				for (Map.Entry<String, Object> entryData : m.entrySet()) {
					String entryKey = entry.getKey();
					String entryDataKey = entryData.getKey();
					if (entryKey.equals(entryDataKey)) {
						//entry.getValue() += Double.valueOf(entryData.getValue().toString());
					}
				}
			}
		}
		resultMap.put("tableInfo", dateList);
		resultMap.put("pageInfo", finalList);
		return resultMap;
	}

	@Override
	public Map<String, Object> download(Map<String, Object> map) {
		String sql = "select table_name from user_tables where table_name like 'IDA_CHARGEBILL_DETAIL_%' and table_name not like '%TEST' ";
		List<Map<String, Object>> tableList = jdbcTemplate.queryForList(sql);
		StringBuffer unionSql = new StringBuffer("with ida_chargebill_detail as(");
		for (int i = 0; i < tableList.size(); i++) {
			String tablename = tableList.get(i).get("TABLE_NAME").toString();
			if (i < tableList.size() - 1) {
				unionSql.append(
						" select month,charge_money,isappeal,item_name,doctor_name,charge_reason,deductedept from "
								+ tablename + " union all ");
			} else {
				unionSql.append(
						" select month,charge_money,isappeal,item_name,doctor_name,charge_reason,deductedept from "
								+ tablename + ") ");
			}
		}
		map.put("unionSql", unionSql);
		List<String> dateList = new ArrayList<>();
		try {
			dateList = getDateList(map);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		Map<String, Object> result = new HashMap<>();
		Map<String, Object> resultMap = new HashMap<>();
		List<Map<String, Object>> moneyList = chargeBillCollectMapper.getAllMoney(map);
		if (moneyList.get(0) != null && moneyList.get(0).get("ALLCHARGE") != null) {
			result.put("allcharge", chargeBillCollectMapper.getAllMoney(map).get(0).getOrDefault("ALLCHARGE", "0"));
		} else {
			result.put("allcharge", "0");
		}
		if (moneyList.get(1) != null && moneyList.get(1).get("ALLBACK") != null) {
			result.put("allback", chargeBillCollectMapper.getAllMoney(map).get(1).getOrDefault("ALLBACK", "0"));
		} else {
			result.put("allback", "0");
		}
		if ("3".equals(map.get("dateType"))) {
			String date = chargeBillCollectMapper.getMonthMax(map).get(0).get("TIME").toString();
			String[] dateArr = date.split("-");
			result.put("mostmonth", dateArr[0] + "年Q" + dateArr[1]);
		} else {
			result.put("mostmonth", chargeBillCollectMapper.getMonthMax(map).get(0).get("TIME"));
		}
		if ("3".equals(map.get("dateType")) && chargeBillCollectMapper.getYearMax(map).size() > 0) {
			String date = chargeBillCollectMapper.getYearMax(map).get(0).get("TIME").toString();
			String[] dateArr = date.split("-");
			result.put("bviousmonth", dateArr[0] + "年Q" + dateArr[1]);
		} else if (!"3".equals(map.get("dateType")) && chargeBillCollectMapper.getYearMax(map).size() > 0) {
			result.put("bviousmonth", chargeBillCollectMapper.getYearMax(map).get(0).get("TIME"));
		} else {
			result.put("bviousmonth", "");
		}
		Double money = 0d;
		if (chargeBillCollectMapper.getDepartmentMoney(map).size() == 0) {
			result.put("mostdepart", "-");
		} else {
			result.put("mostdepart", chargeBillCollectMapper.getDepartmentMoney(map).get(0).get("DEPARTMENT"));
			money = Double.valueOf(
					chargeBillCollectMapper.getDepartmentMoney(map).get(0).getOrDefault("MONEY", "0").toString());
		}
		Double allMoney = Double.valueOf(result.get("allcharge").toString());
		Double rate = 0d;
		if (allMoney > 0) {
			rate = money * 100 / allMoney;
			BigDecimal bg = new BigDecimal(rate);
			Double math = bg.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
			if (math > 0)
				result.put("rate", math.toString() + "%");
			else
				result.put("rate", "0");
		}
		resultMap.put("info", result);
		List<Map<String, Object>> resultMapList = chargeBillCollectMapper.getData(map);
		List<String> departList = new ArrayList<>();
		resultMapList.forEach(x -> {
			x.forEach((k, v) -> {
				if ("DEPARTMENT".equals(k))
					departList.add(v.toString());
				if (v == null)
					x.put(k, "0");
			});
		});
		List<Map<String, Object>> finalList = new ArrayList<>();
		for (String depart : departList) {
			Map<String, Object> dataMap = new HashMap<>();
			for (int i = 0; i < dateList.size(); i++) {
				dataMap.put(dateList.get(i), "");
			}
			Double num = 0d;
			dataMap.put("科室", depart);
			for (Map<String, Object> x : resultMapList) {
				if (depart.equals(x.get("DEPARTMENT").toString()) && !"3".equals(map.get("dateType"))) {
					dataMap.put(x.get("TIME").toString(), x.get("MONEY"));
					num += Double.valueOf(x.get("MONEY").toString());
				} else if (depart.equals(x.get("DEPARTMENT").toString()) && "3".equals(map.get("dateType"))) {
					String[] dateTime = x.get("TIME").toString().split("-");
					dataMap.put(dateTime[0] + "年Q" + dateTime[1], x.get("MONEY"));
					num += Double.valueOf(x.get("MONEY").toString());
				}
			}
			dataMap.put("汇总", num);
			finalList.add(dataMap);
		}
		resultMap.put("tableInfo", dateList);
		resultMap.put("pageInfo", finalList);
		List<Map<String, Object>> list = finalList;
		List<Map<String, Object>> cols = new ArrayList<>();
		for (String str : dateList) {
			cols.add(ImmutableMap.of("COLUMN_NAME", str, "COLUMN_CODE", str, "DATA_TYPE", "VARCHAR2"));
		}
		List<ExcelExportEntity> entityList = new ArrayList<>();
		for (Map<String, Object> col : cols) {
			String name = col.get("COLUMN_NAME").toString();
			String key = col.get("COLUMN_CODE").toString();
			ExcelExportEntity excelExportEntity = new ExcelExportEntity(name, key);
			entityList.add(excelExportEntity);
		}
		Map<String, Object> listMap = new HashMap<>();
		listMap.put("list", list);
		listMap.put("entityList", entityList);
		return listMap;
	}

	public List<String> getDateList(Map<String, Object> map) throws ParseException {
		List<String> result = new LinkedList<>();
		result.add("科室");
		String startDate = map.get("startDate").toString();
		String endDate = map.get("endDate").toString();
		String dateType = map.get("dateType").toString();
		if ("1".equals(dateType)) {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
			Calendar min = Calendar.getInstance();
			Calendar max = Calendar.getInstance();
			min.setTime(sdf.parse(startDate));
			min.set(min.get(Calendar.YEAR), min.get(Calendar.MONTH), 1);
			max.setTime(sdf.parse(endDate));
			max.set(max.get(Calendar.YEAR), max.get(Calendar.MONTH), 2);
			Calendar curr = min;
			while (curr.before(max)) {
				result.add(sdf.format(curr.getTime()));
				curr.add(Calendar.MONTH, 1);
			}
		} else if ("2".equals(dateType)) {
			Integer start = Integer.valueOf(startDate);
			Integer end = Integer.valueOf(endDate);
			for (int i = start; i < end + 1; i++) {
				result.add(String.valueOf(i));
			}
		} else if ("3".equals(dateType)) {
			Integer start = Integer.valueOf(startDate);
			Integer end = Integer.valueOf(endDate);
			for (int i = start; i < end + 1; i++) {
				for (int j = 1; j < 5; j++) {
					result.add(i + "年Q" + j);
				}
			}
		}
		result.add("汇总");
		return result;
	}
}

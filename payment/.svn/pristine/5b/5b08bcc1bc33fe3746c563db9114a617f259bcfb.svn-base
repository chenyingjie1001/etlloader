package com.firesoon.idaservice.chargeBillDetail.impl;

import com.alibaba.druid.support.json.JSONUtils;
import com.firesoon.idaservice.chargeBillDetail.ChargeBillDetailService;
import com.firesoon.paymentmapper.chargeBillDetail.ChargeBillDetailMapper;
import com.firesoon.utils.FileUtil;
import com.firesoon.utils.StringUtil;
import com.google.common.collect.ImmutableMap;

import java.sql.Clob;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Map.Entry;

import org.jeecgframework.poi.excel.entity.ExportParams;
import org.jeecgframework.poi.excel.entity.params.ExcelExportEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Service;

@Primary
@Service
public class ChargeBillDetailServiceImpl implements ChargeBillDetailService {
	
	@Autowired
	private ChargeBillDetailMapper chargeBillDetailMapper;

	@Override
	public void delete(Map<String, Object> map) {
		chargeBillDetailMapper.deleteChargeBillDetail(map);
	}

	@Override
	public Map<String, Object> query(Map<String, Object> map) {
		String departs = (map.get("chargeDepartments") == null ? "" : map.get("chargeDepartments").toString());
		String isappeal = (map.get("isappeal") == null ? "" : map.get("isappeal").toString());
		String itemname = (map.get("itemname") == null ? "" : map.get("itemname").toString());
		String excelDeparts = (map.get("excelDepartments") == null ? "" : map.get("excelDepartments").toString());
		String kkxm = (map.get("kkxm") == null ? "" : map.get("kkxm").toString());
		String reason = (map.get("reason") == null ? "" : map.get("reason").toString());
		List<String> departments = new ArrayList<>();
		List<String> excelDepartments = new ArrayList<>();
		List<String> isappeals = new ArrayList<>();
		List<String> itemnames = new ArrayList<>();
		List<String> kkxms = new ArrayList<>();
		List<String> reasons = new ArrayList<>();
		if (departs.length() > 0) {
			departments = Arrays.asList(departs.split(","));
		}
		if (excelDeparts.length() > 0) {
			excelDepartments = Arrays.asList(excelDeparts.split(","));
		}
		if (isappeal.length() > 0) {
			isappeals = Arrays.asList(isappeal.split(","));
		}
		if (itemname.length() > 0) {
			itemnames = Arrays.asList(itemname.split(","));
		}
		if (kkxm.length() > 0) {
			kkxms = Arrays.asList(kkxm.split(","));
		}
		if (reason.length() > 0) {
			reasons = Arrays.asList(reason.split(","));
		}
		map.put("chargeDepartments", departments);
		map.put("isappeal", isappeals);
		map.put("itemname", itemnames);
		map.put("excelDepartments", excelDepartments);
		map.put("kkxms", kkxms);
		map.put("reasons", reasons);
		List<Map<String, Object>> list = chargeBillDetailMapper.findChargeBillDetail(map);
		for (Map<String, Object> m : list) {
			Iterator<Entry<String, Object>> it = m.entrySet().iterator();
			while (it.hasNext()) {
				Entry<String, Object> eneity = it.next();
				if ("APPEALIMG".equals(eneity.getKey())) {
					m.remove(eneity.getKey());
					break;
				}
			}
		}
		Map<String, Object> result = new HashMap<>();
		result.put("pageInfo", list);
		result.put("excelTable", chargeBillDetailMapper.getExcelTable());
		return result;
	}

	@Override
	public List<Map<String, Object>> allDepartment(Map<String, Object> map) {
		return  chargeBillDetailMapper.getAllChargeDepartment(map);
	}

	@Override
	public List<Map<String, Object>> allExcelDepartment(Map<String, Object> map) {
		List<Map<String, Object>> chargeBill = new ArrayList<>();
		List<Map<String, Object>> city = chargeBillDetailMapper.getCity();
		if (!"宁波".equals(city.get(0).get("AREANAME"))) {
			chargeBill = chargeBillDetailMapper.getAllExcelChargeDepartment(map);
		}
		return chargeBill;
	}

	@Override
	public List<Map<String, Object>> allItem(Map<String, Object> map) {
		return chargeBillDetailMapper.getAllChargeItem(map);
	}

	@Override
	public List<Map<String, Object>> allItemname(Map<String, Object> map) {
		return chargeBillDetailMapper.getAllItemname(map);
	}

	@Override
	public List<Map<String, Object>> allchargereason(Map<String, Object> map) {
		return chargeBillDetailMapper.getAllChargereason(map);
	}

	@Override
	public void updateDepartment(Map<String, Object> map) {
		chargeBillDetailMapper.updateDepartment(map);
	}

	@Override
	public List<Map<String, Object>> getAppealMessage(Map<String, Object> map) {
		List<Map<String, Object>> result = chargeBillDetailMapper.getAppealMessage(map);
		result.stream().forEach(m -> m.put("APPEALIMG", StringUtil.Clob2String((Clob) m.get("APPEALIMG"))));
		return result;
	}

	@Override
	public void updateWrite(Map<String, Object> map) {
		map.put("appealimg", JSONUtils.toJSONString(map.get("appealimg")));
		chargeBillDetailMapper.updateWrite(map);
	}

	@Override
	public Map<String, Object> getSectionLevelMonth() {
		List<Map<String, Object>> result = chargeBillDetailMapper.getSectionLevelMonth();
		Map<String, Object> monthMap = new HashMap<>();
		if (result.size() == 0) {
			monthMap.put("levelmonth", new SimpleDateFormat("yyyy-MM").format(new Date()));
		} else {
			monthMap = result.get(0);
		}
		return monthMap;
	}

	public List<Map<String, Object>> getLowerCaseMap(List<Map<String, Object>> mapList) {
		List<Map<String, Object>> resultList = new ArrayList<>();
		for (Map<String, Object> m : mapList) {
			Iterator<Entry<String, Object>> it = m.entrySet().iterator();
			while (it.hasNext()) {
				Entry<String, Object> eneity = it.next();
				resultList.add(ImmutableMap.of(eneity.getKey().toLowerCase(), eneity.getValue()));
			}
		}
		return mapList;
	}

	@Override
	public List<Map<String, Object>> allDepartmentConfig() {
		return chargeBillDetailMapper.getAllDepartmentConfig();
	}

	@Override
	public Map<String, Object> levelDownload(Map<String, Object> map) {
		String departs = (map.get("chargeDepartments") == null ? "" : map.get("chargeDepartments").toString());
		String isappeal = (map.get("isappeal") == null ? "" : map.get("isappeal").toString());
		String itemname = (map.get("itemname") == null ? "" : map.get("itemname").toString());
		String excelDeparts = (map.get("excelDepartments") == null ? "" : map.get("excelDepartments").toString());
		List<String> departments = new ArrayList<>();
		List<String> isappeals = new ArrayList<>();
		List<String> itemnames = new ArrayList<>();
		List<String> excelDepartments = new ArrayList<>();
		if (departs.length() > 0) {
			departments = Arrays.asList(departs.split(","));
		}
		if (isappeal.length() > 0) {
			isappeals = Arrays.asList(isappeal.split(","));
		}
		if (itemname.length() > 0) {
			itemnames = Arrays.asList(itemname.split(","));
		}
		if (excelDeparts.length() > 0) {
			excelDepartments = Arrays.asList(excelDeparts.split(","));
		}
		map.put("chargeDepartments", departments);
		map.put("isappeal", isappeals);
		map.put("itemname", itemnames);
		map.put("excelDepartments", excelDepartments);
		List<Map<String, Object>> list = chargeBillDetailMapper.findChargeBillDetail(map);
		List<Map<String, Object>> cols = chargeBillDetailMapper.getExcelTable();
		List<ExcelExportEntity> entityList = new ArrayList<>();
		for (Map<String, Object> col : cols) {
			String name = col.get("COLUMN_NAME").toString();
			String key = col.get("COLUMN_CODE").toString();
			ExcelExportEntity excelExportEntity = new ExcelExportEntity(name, key);
			String[] arg = new String[] { "未填写_0", "已填写_1" };
			String[] appealarg = new String[] { "未申诉_0", "已申诉_1", "申诉失败_-1" };
			if ("申诉状态".equals(name)) {
				excelExportEntity.setReplace(appealarg);
			} else if ("填写状态".equals(name)) {
				excelExportEntity.setReplace(arg);
			}

			entityList.add(excelExportEntity);
		}
		Map<String,Object>result = new HashMap<>();
		result.put("entityList", entityList);
		result.put("list", list);
		return result;
	}
}
